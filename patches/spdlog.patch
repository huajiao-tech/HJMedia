diff --git a/include/spdlog/sinks/harmony_sink.h b/include/spdlog/sinks/harmony_sink.h
new file mode 100644
index 0000000..be5e614
--- /dev/null
+++ b/include/spdlog/sinks/harmony_sink.h
@@ -0,0 +1,115 @@
+// Copyright(c) 2015-present, Gabi Melman & spdlog contributors.
+// Distributed under the MIT License (http://opensource.org/licenses/MIT)
+
+#pragma once
+
+#ifdef HarmonyOS
+
+#    include <spdlog/details/fmt_helper.h>
+#    include <spdlog/details/null_mutex.h>
+#    include <spdlog/details/os.h>
+#    include <spdlog/sinks/base_sink.h>
+#    include <spdlog/details/synchronous_factory.h>
+
+#    include <hilog/log.h>
+#    include <chrono>
+#    include <mutex>
+#    include <string>
+#    include <thread>
+#    include <type_traits>
+
+#    if !defined(SPDLOG_HARMONY_RETRIES)
+#        define SPDLOG_HARMONY_RETRIES 2
+#    endif
+
+namespace spdlog {
+namespace sinks {
+
+
+template<typename Mutex>
+class harmony_sink final : public base_sink<Mutex>
+{
+public:
+    explicit harmony_sink(std::string tag = "spdlog", bool use_raw_msg = false)
+        : tag_(std::move(tag))
+        , use_raw_msg_(use_raw_msg)
+    {}
+
+protected:
+    void sink_it_(const details::log_msg &msg) override
+    {
+        const LogLevel priority = convert_to_harmony_(msg.level);
+        memory_buf_t formatted;
+        if (use_raw_msg_)
+        {
+            details::fmt_helper::append_string_view(msg.payload, formatted);
+        }
+        else
+        {
+            base_sink<Mutex>::formatter_->format(msg, formatted);
+        }
+        formatted.push_back('\0');
+        const char *msg_output = formatted.data();
+
+        // See system/core/liblog/logger_write.c for explanation of return value
+        int ret = OH_LOG_Print(LOG_APP, priority, 0x00, tag_.c_str(), "%{public}s", msg_output);
+        if (ret < 0)
+        {
+            throw_spdlog_ex("logging to Harmony failed", ret);
+        }
+    }
+
+    void flush_() override {}
+
+private:
+    // There might be liblog versions used, that do not support __android_log_buf_write. So we only compile and link against
+    // __android_log_buf_write, if user explicitly provides a non-default log buffer. Otherwise, when using the default log buffer, always
+    // log via __android_log_write.
+
+    static LogLevel convert_to_harmony_(spdlog::level::level_enum level)
+    {
+        switch (level)
+        {
+        case spdlog::level::trace:
+            return LOG_DEBUG;
+        case spdlog::level::debug:
+            return LOG_DEBUG;
+        case spdlog::level::info:
+            return LOG_INFO;
+        case spdlog::level::warn:
+            return LOG_WARN;
+        case spdlog::level::err:
+            return LOG_ERROR;
+        case spdlog::level::critical:
+            return LOG_FATAL;
+        default:
+            return LOG_INFO;
+        }
+    }
+
+    std::string tag_;
+    bool use_raw_msg_;
+};
+
+using harmony_sink_mt = harmony_sink<std::mutex>;
+using harmony_sink_st = harmony_sink<details::null_mutex>;
+
+} // namespace sinks
+
+// Create and register android syslog logger
+
+template<typename Factory = spdlog::synchronous_factory>
+inline std::shared_ptr<logger> harmony_logger_mt(const std::string &logger_name, const std::string &tag = "spdlog")
+{
+    return Factory::template create<sinks::harmony_sink_mt>(logger_name, tag);
+}
+
+template<typename Factory = spdlog::synchronous_factory>
+inline std::shared_ptr<logger> harmony_logger_st(const std::string &logger_name, const std::string &tag = "spdlog")
+{
+    return Factory::template create<sinks::harmony_sink_st>(logger_name, tag);
+}
+
+} // namespace spdlog
+
+#endif // __ANDROID__
